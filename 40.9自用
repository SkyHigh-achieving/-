#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<vector>
using namespace std;

//P41.9
//给定一个带表头结点的单链表, 设head为头指针, 结点结构为(data, next), data
//为整型元素, next为指针, 试写出算法:按递增次序输出单链表中各结点的数据元素,
//并释放结点所占的存储空间(要求 : 不允许使用数组作为辅助空间)
#define ElemType int
#define _for(i,a,b) for(int i=(a);i<(b);i++)
#define INF 0x3f3f3f3f

#pragma region//建立带头结点的单链表

typedef struct LNode {
	ElemType data;
	struct LNode* next;
}LNode,*LinkList;

//初始化一个链表
bool InitList(LinkList &L){
	//分配一个头结点
	L = (LinkList)malloc(sizeof(LNode));
	//内存不足，分配失败
	if (L == NULL) {
		return false;
	}
	//头结点之后暂时没有任何结点
	L->next = NULL;
	return true;
}

//判断节点是否为空//L自己的值应该是NULL吧
bool IsEmpty(LinkList L) {
	return ((L->next) == NULL);
}
//利用尾插法建立单链表
LinkList CreatList(vector<int>data) {
	if (data.size() < 1) {
		return NULL;
	}
	//头结点
	LNode*head= (LinkList)malloc(sizeof(LNode));
	//开始的时候要把head的值全部置为空，且下一个结点的值也是空的
	head->data = NULL;
	head->next = NULL;
	LinkList p = head;
	_for(i, 0, data.size()) {
		LNode*s = (LinkList)malloc(sizeof(LNode));
		s->data = data[i];
		s->next = NULL;
		//现在空间中孤零零的创建一个和尾结点一样的s结点，然后在把上一个结点的p指针连过来，再让p指针成为
		//这个s指针，此时，循环。
		p->next = s;
		p = s;
	}
	return head;
}
//输出这个链表
void PrintList(LinkList L) {
	if (IsEmpty(L)) {
		cout << "This List is null" << endl;
		return;
	}
	
	L = L->next;
	while (L != NULL) {
		printf("%d ", L->data);
		L = L->next;
	}
}
#pragma endregion

void SortPrintAndFree(LinkList& head) {
	while (head->next != NULL) {
		LNode* p = head->next;
		LNode* Minpre = head;
		while (p->next != NULL) {
			if (p->next->data < Minpre->next->data) {
				Minpre = p;
			}
			else {
				p = p->next;
			}
		}
		LNode* Del = Minpre->next;
		Minpre->next = Del->next;
		cout << Del->data << " ";
		delete Del;
	}
}
int main() {
	vector<int>data = { 3,5,6,8,1,3,9,3 };
	LinkList head;
	InitList(head);
	head = CreatList(data);
	PrintList(head);
	SortPrintAndFree(head);
	PrintList(head);

	delete head;
	return 0;
}
